name: Release Extension (v2)
on:
  repository_dispatch:
    types: [liquibase-release]
  workflow_dispatch:
    inputs:
      liquibaseVersion:
        description: "Liquibase Version"
        required: true
      extensionVersion:
        description: "Container Version (Defaults to Liquibase Version)"
        required: false

jobs:
  setup-update-draft-build:
    name: Release ${{ matrix.image.name }} Version ${{ inputs.liquibaseVersion}} ${{ matrix.image.suffix }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ 
          {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
          {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
          ]
    steps:
      - name: Collect Data
        id: collect-data
        uses: actions/github-script@v6
        with:
          script: |
            const getMinorVersion = (liquibaseVersion) => {
              const arr = liquibaseVersion.split(".")
              return `${arr[0]}.${arr[1]}`
            }
            if (context.payload.client_payload) {
                const liquibaseVersion = context.payload.client_payload.liquibaseVersion
                const minorVersion = getMinorVersion(liquibaseVersion)
                core.setOutput("liquibaseVersion", liquibaseVersion);
                core.setOutput("extensionVersion", liquibaseVersion);
                core.setOutput("minorVersion", minorVersion);
            } else if (context.payload.inputs) {
                const liquibaseVersion = context.payload.inputs.liquibaseVersion
                const minorVersion = getMinorVersion(liquibaseVersion)
                core.setOutput("liquibaseVersion", liquibaseVersion);
                core.setOutput("extensionVersion", context.payload.inputs.extensionVersion || liquibaseVersion);
                core.setOutput("minorVersion", minorVersion);
            } else {
              core.setFailed('Unknown event type')
            }
      
      - run: |
          echo "Saw Liquibase version ${{ steps.collect-data.outputs.liquibaseVersion }}"
          echo "Saw Extension version ${{ steps.collect-data.outputs.extensionVersion }}"
      
      - uses: actions/checkout@v3
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
          
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: "8"
          distribution: "adopt"
          
      - name: Configure git user
        run: |
          git config user.name "liquibot"
          git config user.email "liquibot@liquibase.org"
          
      - name: Update Dockerfile and commit changes
        run: |
          LIQUIBASE_SHA=`curl -LsS https://github.com/liquibase/liquibase/releases/download/v${{ steps.collect-data.outputs.liquibaseVersion }}/liquibase-${{ steps.collect-data.outputs.liquibaseVersion }}.tar.gz | sha256sum | awk '{ print $1 }'`
          sed -i 's/^ARG LIQUIBASE_VERSION=.*/ARG LIQUIBASE_VERSION='"${{ steps.collect-data.outputs.liquibaseVersion }}"'/' ${{ github.workspace }}/${{ matrix.image.dockerfile }}
          sed -i 's/^ARG LB_SHA256=.*/ARG LB_SHA256='"$LIQUIBASE_SHA"'/' ${{ github.workspace }}/${{ matrix.image.dockerfile }}
          git add ${{ matrix.image.dockerfile }}
          if git diff-index --cached --quiet HEAD --
          then
            echo "Nothing new to commit"
          else
            git commit -m "Liquibase Version Bumped to ${{ steps.collect-data.outputs.extensionVersion }} for ${{ matrix.image.name }} ${{ matrix.image.suffix }}"
            git tag -fa -m "Version Bumped to ${{ steps.collect-data.outputs.extensionVersion }}" v${{ steps.collect-data.outputs.extensionVersion }}
            git push -f "https://liquibot:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git" HEAD:${{ github.ref }} --follow-tags --tags
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      
      - name: Get release SHA
        id: get-release-sha
        run: echo "{releaseSha}=$(git rev-parse HEAD)" >> GITHUB_OUPUT
      
      - uses: actions/checkout@v3
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          target_commitish: ${{ steps.get-release-sha.outputs.releaseSha }}
          name: v${{ steps.collect-data.outputs.extensionVersion }}
          tag_name: v${{ steps.collect-data.outputs.extensionVersion }}
          draft: true
          body: Support for Liquibase ${{ steps.collect-data.outputs.liquibaseVersion }}.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/checkout@v3 # Checkout the SHA of the updated Dockerfile from the setup step
        with:
          ref: ${{ steps.get-release-sha.outputs.releaseSha }}
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.image.dockerfile }}
          no-cache: true
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ matrix.image.name }}:latest${{ matrix.image.suffix }},${{ matrix.image.name }}:${{ steps.collect-data.outputs.extensionVersion }}${{ matrix.image.suffix }},${{ matrix.image.name }}:${{ steps.collect-data.outputs.minorVersion }}${{ matrix.image.suffix }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: liquibase # verification of the alias takes a few days 
          REPOSITORY: liquibase-docker
          IMAGE_TAG: ${{ matrix.image.name }}:latest${{ matrix.image.suffix }},${{ matrix.image.name }}:${{ steps.collect-data.outputs.extensionVersion }}${{ matrix.image.suffix }},${{ matrix.image.name }}:${{ steps.collect-data.outputs.minorVersion }}${{ matrix.image.suffix }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG