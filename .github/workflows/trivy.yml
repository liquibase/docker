# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Vulnerability Scanning

on:
  workflow_dispatch:
    inputs:
      max_tags:
        description: 'Maximum number of published tags to scan'
        required: false
        default: '20'
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '0 7 * * 1-5' # Run every weekday at 7am UTC

permissions:
  contents: read
  security-events: write
  actions: read

env:
  MAX_TAGS_TO_SCAN: ${{ github.event.inputs.max_tags || '10' }}  # Use input or default to 10

jobs:
  # trivy:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image: [ 
  #         {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
  #         {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
  #         {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
  #         ]
  #   permissions:
  #     contents: read # for actions/checkout to fetch code
  #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #     actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #   name: Trivy
  #   runs-on: "ubuntu-22.04"
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
  #       run: |
  #         docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@0.31.0
  #       with:
  #         image-ref: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
  #         vuln-type: 'os,library'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         severity: 'HIGH,CRITICAL'
  #         exit-code: '1'
  #         limit-severities-for-sarif: true

  #     - name: Notify Slack on Build Failure
  #       if: failure()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_COLOR: 'failure'
  #         SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
  #         SLACK_TITLE: "❌ ${{ github.repository }} ❌ Trivy failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
  #         SLACK_USERNAME: liquibot
  #         SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
  #         SLACK_ICON_EMOJI: ":whale:"
  #         SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
  #         SLACK_LINK_NAMES: true

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       if: always()
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
  #         category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

  #     - name: Generate Security Report
  #       if: always()
  #       uses: rsdmike/github-security-report-action@v3.0.4
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         outputDir: ./reports/trivy${{ matrix.image.suffix }}/
  #         sarifReportDir: .

  #     - name: Upload Security Report
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: security-report-trivy${{ matrix.image.suffix }}
  #         path: ./reports/trivy${{ matrix.image.suffix }}/summary.pdf


  # scout:
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     image: [ 
    #       {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
    #       {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
    #       {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
    #       ]
    # permissions:
    #   contents: read # for actions/checkout to fetch code
    #   security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    #   actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    #   pull-requests: write # for docker/scout-action to write comments on pull requests
    # name: Scout
    # runs-on: "ubuntu-22.04"
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4

    #   - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
    #     run: |
    #       docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

    #   - uses: docker/login-action@v3
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}

    #   - name: Docker Scout
    #     uses: docker/scout-action@v1.18.1
    #     with:
    #       command: cves
    #       image: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       write-comment: true
    #       sarif-file: 'scout-results.sarif'
    #       summary: true
    #       exit-code: true
    #       only-severities: "critical,high"

    #   - name: Notify Slack on Build Failure
    #     if: failure()
    #     uses: rtCamp/action-slack-notify@v2
    #     env:
    #       SLACK_COLOR: 'failure'
    #       SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
    #       SLACK_TITLE: "❌ ${{ github.repository }} ❌ Docker Scout failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
    #       SLACK_USERNAME: liquibot
    #       SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
    #       SLACK_ICON_EMOJI: ":whale:"
    #       SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
    #       SLACK_LINK_NAMES: true

    #   - name: Upload Scout scan results to GitHub Security tab
    #     if: always()
    #     uses: github/codeql-action/upload-sarif@v3
    #     with:
    #       sarif_file: 'scout-results.sarif'
    #       category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

    #   - name: Generate Security Report
    #     if: always()
    #     uses: rsdmike/github-security-report-action@v3.0.4
    #     with:
    #       token: ${{ secrets.GITHUB_TOKEN }}
    #       outputDir: ./reports/scout${{ matrix.image.suffix }}/
    #       sarifReportDir: .

    #   - name: Upload Security Report
    #     if: always()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: security-report-scout${{ matrix.image.suffix }}
    #       path: ./reports/scout${{ matrix.image.suffix }}/summary.pdf


  generate-matrix:
    name: Generate Scan Matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix for all image/tag combinations
        id: set-matrix
        run: |
          MAX_TAGS=${{ github.event.inputs.max_tags || '10' }}
          
          echo "Generating matrix for scanning with max $MAX_TAGS tags per image..."
          
          # Initialize matrix
          MATRIX_INCLUDE="["
          FIRST=true
          
          # Process each image
          for IMAGE in "liquibase/liquibase" "liquibase/liquibase-pro"; do
            echo "Getting tags for $IMAGE..."
            
            # Get tags from Docker Hub API
            TAGS=$(curl -s "https://hub.docker.com/v2/repositories/$IMAGE/tags/?page_size=100&ordering=-last_updated" | \
              jq -r '.results[] | select(.tag_status == "active") | .name' | \
              head -n $MAX_TAGS)
            
            # Add each tag to matrix
            while IFS= read -r tag; do
              if [ -n "$tag" ]; then
                if [ "$FIRST" = true ]; then
                  MATRIX_INCLUDE="${MATRIX_INCLUDE}{\"image\":\"$IMAGE\",\"tag\":\"$tag\"}"
                  FIRST=false
                else
                  MATRIX_INCLUDE="${MATRIX_INCLUDE},{\"image\":\"$IMAGE\",\"tag\":\"$tag\"}"
                fi
              fi
            done <<< "$TAGS"
          done
          
          MATRIX_INCLUDE="${MATRIX_INCLUDE}]"
          MATRIX="{\"include\":$MATRIX_INCLUDE}"
          
          echo "Generated matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  trivy-scan:
    name: Trivy Scan ${{ matrix.image }}:${{ matrix.tag }}
    runs-on: ubuntu-22.04
    needs: generate-matrix
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: '${{ matrix.image }}:${{ matrix.tag }}'
          vuln-type: 'os,library'
          scanners: 'vuln'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          limit-severities-for-sarif: true
        continue-on-error: true
        id: trivy_scan

      - name: Print Trivy vulnerabilities to log
        if: steps.trivy_scan.outcome == 'failure' && always()
        run: |
          echo ""
          echo "==== Trivy Vulnerabilities (table format) ===="
          trivy image --severity HIGH,CRITICAL --format table ${{ matrix.image }}:${{ matrix.tag }}

      - name: Upload SARIF results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-${{ matrix.image }}-${{ matrix.tag }}'
        continue-on-error: true

      - name: Set sanitized names for artifacts
        if: always()
        id: sanitize
        run: |
          SANITIZED_IMAGE=$(echo "${{ matrix.image }}" | tr '/' '-')
          SANITIZED_TAG=$(echo "${{ matrix.tag }}" | tr '/' '-' | tr ':' '-' | tr '.' '-')
          echo "image=$SANITIZED_IMAGE" >> $GITHUB_OUTPUT
          echo "tag=$SANITIZED_TAG" >> $GITHUB_OUTPUT

      - name: Upload Trivy Published Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-trivy-${{ steps.sanitize.outputs.image }}-${{ steps.sanitize.outputs.tag }}
          path: trivy-results.sarif
          if-no-files-found: ignore

      - name: Notify Slack on Published Image Scan Failure
        if: steps.trivy_scan.outcome == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'failure'
          SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
          SLACK_TITLE: "❌ ${{ github.repository }} ❌ Trivy published image scan failed for ${{ matrix.image }}:${{ matrix.tag }} on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
          SLACK_ICON_EMOJI: ":whale:"
          SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image }}:${{ matrix.tag }}"
          SLACK_LINK_NAMES: true