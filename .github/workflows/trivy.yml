# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Vulnerability Scanning

on:
  workflow_dispatch:
    inputs:
      max_tags:
        description: 'Maximum number of published tags to scan'
        required: false
        default: '20'
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '0 7 * * 1-5' # Run every weekday at 7am UTC

permissions:
  contents: read

env:
  # Configuration for published image scanning
  MAX_PARALLEL_JOBS: 6
  MAX_TAGS: ${{ github.event.inputs.max_tags || '20' }}

jobs:
  # trivy:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image: [ 
  #         {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
  #         {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
  #         {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
  #         ]
  #   permissions:
  #     contents: read # for actions/checkout to fetch code
  #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #     actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #   name: Trivy
  #   runs-on: "ubuntu-22.04"
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
  #       run: |
  #         docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@0.31.0
  #       with:
  #         image-ref: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
  #         vuln-type: 'os,library'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         severity: 'HIGH,CRITICAL'
  #         exit-code: '1'
  #         limit-severities-for-sarif: true

  #     - name: Notify Slack on Build Failure
  #       if: failure()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_COLOR: 'failure'
  #         SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
  #         SLACK_TITLE: "❌ ${{ github.repository }} ❌ Trivy failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
  #         SLACK_USERNAME: liquibot
  #         SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
  #         SLACK_ICON_EMOJI: ":whale:"
  #         SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
  #         SLACK_LINK_NAMES: true

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       if: always()
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
  #         category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

  #     - name: Generate Security Report
  #       if: always()
  #       uses: rsdmike/github-security-report-action@v3.0.4
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         outputDir: ./reports/trivy${{ matrix.image.suffix }}/
  #         sarifReportDir: .

  #     - name: Upload Security Report
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: security-report-trivy${{ matrix.image.suffix }}
  #         path: ./reports/trivy${{ matrix.image.suffix }}/summary.pdf


  # scout:
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     image: [ 
    #       {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
    #       {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
    #       {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
    #       ]
    # permissions:
    #   contents: read # for actions/checkout to fetch code
    #   security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    #   actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    #   pull-requests: write # for docker/scout-action to write comments on pull requests
    # name: Scout
    # runs-on: "ubuntu-22.04"
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4

    #   - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
    #     run: |
    #       docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

    #   - uses: docker/login-action@v3
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}

    #   - name: Docker Scout
    #     uses: docker/scout-action@v1.18.1
    #     with:
    #       command: cves
    #       image: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       write-comment: true
    #       sarif-file: 'scout-results.sarif'
    #       summary: true
    #       exit-code: true
    #       only-severities: "critical,high"

    #   - name: Notify Slack on Build Failure
    #     if: failure()
    #     uses: rtCamp/action-slack-notify@v2
    #     env:
    #       SLACK_COLOR: 'failure'
    #       SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
    #       SLACK_TITLE: "❌ ${{ github.repository }} ❌ Docker Scout failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
    #       SLACK_USERNAME: liquibot
    #       SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
    #       SLACK_ICON_EMOJI: ":whale:"
    #       SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
    #       SLACK_LINK_NAMES: true

    #   - name: Upload Scout scan results to GitHub Security tab
    #     if: always()
    #     uses: github/codeql-action/upload-sarif@v3
    #     with:
    #       sarif_file: 'scout-results.sarif'
    #       category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

    #   - name: Generate Security Report
    #     if: always()
    #     uses: rsdmike/github-security-report-action@v3.0.4
    #     with:
    #       token: ${{ secrets.GITHUB_TOKEN }}
    #       outputDir: ./reports/scout${{ matrix.image.suffix }}/
    #       sarifReportDir: .

    #   - name: Upload Security Report
    #     if: always()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: security-report-scout${{ matrix.image.suffix }}
    #       path: ./reports/scout${{ matrix.image.suffix }}/summary.pdf


  # OPTIMIZED: Matrix strategy for parallel published image scanning

  scan-published-images:
      runs-on: ubuntu-22.04
      strategy:
        fail-fast: false
        matrix:
          repo: [liquibase, liquibase-pro]
      name: Trivy Scan - ${{ matrix.repo }} (Published)
      
      steps:
        - uses: actions/checkout@v4

        # Cache Trivy DB to speed up scans
        - name: Cache Trivy DB
          uses: actions/cache@v4
          with:
            path: /tmp/trivy-cache
            key: trivy-db-${{ runner.os }}-${{ hashFiles('**/scan-repo.sh') }}
            restore-keys: |
              trivy-db-${{ runner.os }}-

        # Cache Docker layers for faster pulls
        - name: Cache Docker layers
          uses: actions/cache@v4
          with:
            path: /tmp/.docker-cache
            key: docker-cache-${{ runner.os }}-${{ matrix.repo }}
            restore-keys: |
              docker-cache-${{ runner.os }}-

        # Pre-install dependencies for better performance
        - name: Install dependencies
          run: |
            sudo apt-get update && sudo apt-get install -y jq curl
            # Configure Docker to use cache
            sudo mkdir -p /etc/docker
            echo '{"data-root": "/tmp/.docker-cache"}' | sudo tee /etc/docker/daemon.json
            sudo systemctl restart docker

        - name: Run optimized scan script
          env:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            MAX_PARALLEL_JOBS: ${{ env.MAX_PARALLEL_JOBS }}
            MAX_TAGS: ${{ env.MAX_TAGS }}
          run: |
            chmod +x scan-repo.sh 
            ./scan-repo.sh ${{ matrix.repo }}

        - name: Upload Trivy artifacts
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: trivy-published-scan-${{ matrix.repo }}
            path: artifacts
            retention-days: 30  # Reduce retention to save storage

        - name: Notify Slack on failure
          if: failure()
          uses: rtCamp/action-slack-notify@v2
          env:
            SLACK_COLOR: 'failure'
            SLACK_MESSAGE: |
              ⚠️ Vulnerabilities found in published ${{ matrix.repo }} Docker images.
              Scanned ${{ env.MAX_TAGS }} most recent tags.
              Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            SLACK_TITLE: "❌ Trivy Scan Failed: ${{ matrix.repo }}"
            SLACK_USERNAME: liquibot
            SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
            SLACK_ICON_EMOJI: ":whale:"
            SLACK_LINK_NAMES: true

  # Summary job to provide scan overview
  scan-summary:
    needs: scan-published-images
    runs-on: ubuntu-22.04
    if: always()
    name: Published Scan Summary
    steps:
      - name: Download all scan artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Generate scan summary
        run: |
          echo "# Published Image Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "Scan completed at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "Maximum tags scanned per repository: ${{ env.MAX_TAGS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for repo in liquibase liquibase-pro; do
            if [ -f "all-artifacts/trivy-published-scan-$repo/scan-summary.txt" ]; then
              echo "## $repo" >> $GITHUB_STEP_SUMMARY
              cat "all-artifacts/trivy-published-scan-$repo/scan-summary.txt" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done
