# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Vulnerability Scanning

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '0 7 * * 1-5' # Run every weekday at 7am UTC

permissions:
  contents: read

jobs:
  # trivy:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       image: [ 
  #         {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
  #         {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
  #         {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
  #         ]
  #   permissions:
  #     contents: read # for actions/checkout to fetch code
  #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #     actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
  #   name: Trivy
  #   runs-on: "ubuntu-22.04"
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
  #       run: |
  #         docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@0.31.0
  #       with:
  #         image-ref: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
  #         vuln-type: 'os,library'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         severity: 'HIGH,CRITICAL'
  #         exit-code: '1'
  #         limit-severities-for-sarif: true

  #     - name: Notify Slack on Build Failure
  #       if: failure()
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_COLOR: 'failure'
  #         SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
  #         SLACK_TITLE: "‚ùå ${{ github.repository }} ‚ùå Trivy failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
  #         SLACK_USERNAME: liquibot
  #         SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
  #         SLACK_ICON_EMOJI: ":whale:"
  #         SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
  #         SLACK_LINK_NAMES: true

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       if: always()
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
  #         category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

  #     - name: Generate Security Report
  #       if: always()
  #       uses: rsdmike/github-security-report-action@v3.0.4
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         outputDir: ./reports/trivy${{ matrix.image.suffix }}/
  #         sarifReportDir: .

  #     - name: Upload Security Report
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: security-report-trivy${{ matrix.image.suffix }}
  #         path: ./reports/trivy${{ matrix.image.suffix }}/summary.pdf


  # scout:
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     image: [ 
    #       {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
    #       {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
    #       {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
    #       ]
    # permissions:
    #   contents: read # for actions/checkout to fetch code
    #   security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    #   actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    #   pull-requests: write # for docker/scout-action to write comments on pull requests
    # name: Scout
    # runs-on: "ubuntu-22.04"
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v4

    #   - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
    #     run: |
    #       docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

    #   - uses: docker/login-action@v3
    #     with:
    #       username: ${{ secrets.DOCKERHUB_USERNAME }}
    #       password: ${{ secrets.DOCKERHUB_TOKEN }}

    #   - name: Docker Scout
    #     uses: docker/scout-action@v1.18.1
    #     with:
    #       command: cves
    #       image: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       write-comment: true
    #       sarif-file: 'scout-results.sarif'
    #       summary: true
    #       exit-code: true
    #       only-severities: "critical,high"

    #   - name: Notify Slack on Build Failure
    #     if: failure()
    #     uses: rtCamp/action-slack-notify@v2
    #     env:
    #       SLACK_COLOR: 'failure'
    #       SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
    #       SLACK_TITLE: "‚ùå ${{ github.repository }} ‚ùå Docker Scout failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
    #       SLACK_USERNAME: liquibot
    #       SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
    #       SLACK_ICON_EMOJI: ":whale:"
    #       SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
    #       SLACK_LINK_NAMES: true

    #   - name: Upload Scout scan results to GitHub Security tab
    #     if: always()
    #     uses: github/codeql-action/upload-sarif@v3
    #     with:
    #       sarif_file: 'scout-results.sarif'
    #       category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

    #   - name: Generate Security Report
    #     if: always()
    #     uses: rsdmike/github-security-report-action@v3.0.4
    #     with:
    #       token: ${{ secrets.GITHUB_TOKEN }}
    #       outputDir: ./reports/scout${{ matrix.image.suffix }}/
    #       sarifReportDir: .

    #   - name: Upload Security Report
    #     if: always()
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: security-report-scout${{ matrix.image.suffix }}
    #       path: ./reports/scout${{ matrix.image.suffix }}/summary.pdf

  trivy_published:
    name: Trivy Scan Published Images
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Install jq and curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy --version

      - name: Fetch and scan Docker tags
        env:
          DOCKERHUB_NAMESPACE: liquibase
        run: |
          mkdir -p sarif-outputs
          touch trivy-failures.txt

          fetch_tags() {
            local repo=$1
            local url="https://hub.docker.com/v2/repositories/${DOCKERHUB_NAMESPACE}/${repo}/tags?page_size=100"
            while [ -n "$url" ]; do
              echo "Fetching: $url"
              response=$(curl -s "$url")
              echo "$response" | jq -r '.results[].name'
              url=$(echo "$response" | jq -r '.next')
              [ "$url" = "null" ] && break
            done
          }

          scan_tag() {
            local repo=$1
            local tag=$2
            local image="docker.io/${DOCKERHUB_NAMESPACE}/${repo}:${tag}"
            local sarif="sarif-outputs/${repo//\//-}--${tag//\//-}.sarif"
            echo "üîç Scanning $image"

            if docker pull "$image"; then
              if ! trivy image \
                --vuln-type os,library \
                --scanners vuln \
                --format sarif \
                --output "$sarif" \
                --severity HIGH,CRITICAL \
                --exit-code 1 \
                "$image"; then
                echo "$image" >> trivy-failures.txt
                echo "‚ö†Ô∏è Vulnerabilities found in $image"
              fi
            else
              echo "‚ùå Failed to pull $image"
            fi

            # Prune pulled image and clean Docker cache
            docker image rm "$image" || true
            docker system prune -f -a --volumes || true
          }

          for repo in liquibase liquibase-pro; do
            echo "Fetching and scanning tags for $repo..."
            for tag in $(fetch_tags "$repo"); do
              scan_tag "$repo" "$tag"
            done
          done

      - name: Notify Slack on Published Image Scan Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'failure'
          SLACK_MESSAGE: "‚ö†Ô∏è Vulnerabilities were found in one or more published Docker images. See GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SLACK_TITLE: "‚ùå Docker Image Scan Failed for Liquibase Images"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
          SLACK_ICON_EMOJI: ":whale:"
          SLACK_FOOTER: "${{ github.repository }}"
          SLACK_LINK_NAMES: true

      - name: Upload all SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-outputs
          category: trivy-published

      - name: Upload all Trivy scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-published-scan-artifacts
          path: sarif-outputs

      - name: Print summary of failed scans
        if: always()
        run: |
          if [ -s trivy-failures.txt ]; then
            echo "‚ùå The following images had HIGH/CRITICAL vulnerabilities:"
            cat trivy-failures.txt
          else
            echo "‚úÖ No vulnerabilities found across all scanned images."
          fi
