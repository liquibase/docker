# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Vulnerability Scanning

on:
  workflow_dispatch:
    inputs:
      max_tags_to_scan:
        description: 'Maximum number of published tags to scan'
        required: false
        default: '20'
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '0 7 * * 1-5' # Run every weekday at 7am UTC

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  trivy:
    strategy:
      fail-fast: false
      matrix:
        image: [ 
          {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
          {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
          {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
          ]
    name: Trivy
    runs-on: "ubuntu-22.04"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
        run: |
          docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
          vuln-type: 'os,library'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          limit-severities-for-sarif: true

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Notify Slack on Build Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'failure'
          SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
          SLACK_TITLE: "❌ ${{ github.repository }} ❌ Trivy failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ env.DOCKER_SLACK_WEBHOOK_URL }}
          SLACK_ICON_EMOJI: ":whale:"
          SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
          SLACK_LINK_NAMES: true

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

      - name: Generate Security Report
        if: always()
        uses: rsdmike/github-security-report-action@v3.0.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          outputDir: ./reports/trivy${{ matrix.image.suffix }}/
          sarifReportDir: .

      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-trivy${{ matrix.image.suffix }}
          path: ./reports/trivy${{ matrix.image.suffix }}/summary.pdf


  scout:
    strategy:
      fail-fast: false
      matrix:
        image: [ 
          {dockerfile: Dockerfile, name: liquibase/liquibase, suffix: ""},
          {dockerfile: Dockerfile.alpine, name: liquibase/liquibase, suffix: "-alpine"},
          {dockerfile: DockerfilePro, name: liquibase/liquibase-pro, suffix: "-pro"},
          ]
    name: Scout
    runs-on: "ubuntu-22.04"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build ${{ matrix.image.name }}${{ matrix.image.suffix }} from Dockerfile
        run: |
          docker build -f ${{ matrix.image.dockerfile }} -t ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }} .

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Decode DOCKERHUB_USERNAME
        run: |
          decoded_username=$(echo "${{ env.DOCKERHUB_USERNAME }}" | base64 -d)
          echo "DOCKERHUB_USERNAME_DECODED=$decoded_username" >> $GITHUB_ENV

      - uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME_DECODED }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Docker Scout
        uses: docker/scout-action@v1.18.2
        with:
          command: cves
          image: '${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          write-comment: true
          sarif-file: 'scout-results.sarif'
          summary: true
          exit-code: true
          only-severities: "critical,high"

      - name: Notify Slack on Build Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'failure'
          SLACK_MESSAGE: "View details on GitHub Actions: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Triggered by repository: ${{ github.repository }} and job: ${{ github.job }}"
          SLACK_TITLE: "❌ ${{ github.repository }} ❌ Docker Scout failed on branch ${{ github.ref_name }} for commit ${{ github.sha }} in repository ${{ github.repository }}"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ env.DOCKER_SLACK_WEBHOOK_URL }}
          SLACK_ICON_EMOJI: ":whale:"
          SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image.name }}${{ matrix.image.suffix }}:${{ github.sha }}"
          SLACK_LINK_NAMES: true

      - name: Upload Scout scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'scout-results.sarif'
          category: '${{ matrix.image.name }}${{ matrix.image.suffix }}'

      - name: Generate Security Report
        if: always()
        uses: rsdmike/github-security-report-action@v3.0.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          outputDir: ./reports/scout${{ matrix.image.suffix }}/
          sarifReportDir: .

      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-scout${{ matrix.image.suffix }}
          path: ./reports/scout${{ matrix.image.suffix }}/summary.pdf


  generate-matrix:
    name: Generate Scan Matrix
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix for all image/tag combinations
        id: set-matrix
        run: |
          MAX_TAGS=${{ github.event.inputs.max_tags_to_scan || '10' }}
          echo "Generating matrix for scanning with max $MAX_TAGS tags per image..."
          # Initialize matrix
          MATRIX_INCLUDE="["
          FIRST=true
          
          # Process each image
          for IMAGE in "liquibase/liquibase" "liquibase/liquibase-pro"; do
            echo "Getting tags for $IMAGE..."
            REPO=$(basename "$IMAGE")
            TAGS=""
            URL="https://hub.docker.com/v2/namespaces/liquibase/repositories/${REPO}/tags?page_size=100"
            while [ -n "$URL" ]; do
              RESPONSE=$(curl -s "$URL")
              # Define regex pattern for matching Docker tags
              TAG_REGEX='^[0-9]+\.[0-9]+(\.[0-9]+)?(-alpine|-latest)?$'
              # Explanation: Matches tags in the format "x.y", "x.y.z", "x.y-alpine", "x.y.z-alpine", "x.y-latest", or "x.y.z-latest"
              NEW_TAGS=$(echo "$RESPONSE" | jq -r '.results[] | select(.tag_status == "active") | .name' | \
                grep -E "$TAG_REGEX" || true)

              TAGS=$(echo -e "$TAGS\n$NEW_TAGS" | sort -Vu)
              
              # Deduplicate shorthand semver tags like "4.33" or "4.33-alpine"
              # if the corresponding full semver tag "4.33.0" or "4.33.0-alpine" exists.
              # This ensures we only keep the more specific version when both are present.
              # Compatible with GNU awk (used in GitHub Actions runners).
              # Filter out "x.y" shorthand tags if equivalent "x.y.0" exists (e.g., drop 4.33 if 4.33.0 is present)
              # This version scans all lines first before filtering.
              TAGS=$(echo "$TAGS" | awk '
                {
                  tags[NR] = $0
                  if (match($0, /^([0-9]+)\.([0-9]+)\.([0-9]+)(-alpine|-latest)?$/, m)) {
                    full = m[1] "." m[2] "." m[3] (m[4] ? m[4] : "")
                    has_full[full] = 1
                  }
                }
                END {
                  for (i = 1; i <= NR; i++) {
                    tag = tags[i]
                    if (match(tag, /^([0-9]+)\.([0-9]+)(-alpine|-latest)?$/, m)) {
                      short = m[1] "." m[2] ".0" (m[3] ? m[3] : "")
                      if (has_full[short]) continue
                    }
                    print tag
                  }
                }
              ')

              URL=$(echo "$RESPONSE" | jq -r '.next')
              [ "$URL" = "null" ] && break
            done

            # Keep only the latest MAX_TAGS
            TAGS=$(echo "$TAGS" | tac | head -n "$MAX_TAGS")

            while IFS= read -r tag; do
              if [ -n "$tag" ]; then
                if [ "$FIRST" = true ]; then
                  MATRIX_INCLUDE="${MATRIX_INCLUDE}{\"image\":\"$IMAGE\",\"tag\":\"$tag\"}"
                  FIRST=false
                else
                  MATRIX_INCLUDE="${MATRIX_INCLUDE},{\"image\":\"$IMAGE\",\"tag\":\"$tag\"}"
                fi
              fi
            done <<< "$TAGS"
          done

          MATRIX_INCLUDE="${MATRIX_INCLUDE}]"
          MATRIX="{\"include\":$MATRIX_INCLUDE}"

          echo "Generated matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  trivy-scan:
    name: Trivy Scan ${{ matrix.image }}:${{ matrix.tag }}
    runs-on: ubuntu-22.04
    needs: generate-matrix
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        id: trivy_scan
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: '${{ matrix.image }}:${{ matrix.tag }}'
          vuln-type: 'os,library'
          scanners: 'vuln'
          format: 'json'
          output: 'trivy-results.json'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
        continue-on-error: true

      - name: Convert JSON to SARIF and print table format
        if: always()
        run: |
          # Convert JSON to SARIF for Security tab upload
          if [ -f trivy-results.json ]; then
            trivy convert --format sarif --output trivy-results.sarif trivy-results.json
            
            # Print table format only if vulnerabilities were found
            if [ "${{ steps.trivy_scan.outcome }}" = "failure" ]; then
              echo ""
              echo "==== Trivy Vulnerabilities (table format) ===="
              trivy convert --format table trivy-results.json
            fi
          fi

      - name: Upload SARIF results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-${{ matrix.image }}-${{ matrix.tag }}'
        continue-on-error: true

      - name: Set sanitized names for artifacts
        if: always()
        id: sanitize
        run: |
          SANITIZED_IMAGE=$(echo "${{ matrix.image }}" | tr '/' '-')
          SANITIZED_TAG=$(echo "${{ matrix.tag }}" | tr '/' '-' | tr ':' '-' | tr '.' '-')
          echo "image=$SANITIZED_IMAGE" >> $GITHUB_OUTPUT
          echo "tag=$SANITIZED_TAG" >> $GITHUB_OUTPUT

      - name: Upload Trivy Published Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-trivy-${{ steps.sanitize.outputs.image }}-${{ steps.sanitize.outputs.tag }}
          path: |
            trivy-results.json
            trivy-results.sarif
          if-no-files-found: ignore

      - name: Fail job if vulnerabilities found
        if: steps.trivy_scan.outcome == 'failure'
        run: |
          echo "❌ Vulnerabilities were found in ${{ matrix.image }}:${{ matrix.tag }}"
          echo "Check the logs above for detailed vulnerability information"
          exit 1
      
      - name: Append summary to GitHub Actions summary
        if: always()
        run: |
          echo "### 🛡️ Trivy Summary for \`${{ matrix.image }}:${{ matrix.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Library | Vulnerability | Severity | Status | Installed | Fixed |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------------|----------|--------|-----------|--------|" >> $GITHUB_STEP_SUMMARY

          # Extract and format top-level vulnerabilities (HIGH or CRITICAL only)
          if [ -f trivy-results.json ]; then
            jq -r '.Results[]?.Vulnerabilities[]? |
              "| \(.PkgName) | \(.VulnerabilityID) | \(.Severity) | \(.Status // "-") | \(.InstalledVersion) | \(.FixedVersion // "-") |"' \
              trivy-results.json >> $GITHUB_STEP_SUMMARY || true
          fi

  notify-results:
    name: Notify Scan Results
    runs-on: ubuntu-22.04
    needs: trivy-scan
    if: always()
    strategy:
      matrix:
        image: [
          liquibase/liquibase,
          liquibase/liquibase-pro
        ]
    steps:
      - name: "Check failures for ${{ matrix.image }}"
        id: check_failures
        uses: actions/github-script@v7
        with:
          script: |
            const image = '${{ matrix.image }}';
            console.log(`Checking for failures in ${image}...`);
            
            // Get the trivy-scan job results
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            // Check if any jobs for this specific image failed
            const imageJobs = jobs.data.jobs.filter(job => 
              job.name.includes(image) && job.name.includes('Trivy Scan')
            );
            
            const failedJobs = imageJobs.filter(job => job.conclusion === 'failure');
            const hasFailures = failedJobs.length > 0;
            
            console.log(`Found ${imageJobs.length} scan jobs for ${image}`);
            console.log(`Failed jobs: ${failedJobs.length}`);
            
            core.setOutput('has_failures', hasFailures.toString());
            core.setOutput('failed_count', failedJobs.length.toString());
            core.setOutput('total_count', imageJobs.length.toString());

      - name: "Notify Slack for ${{ matrix.image }} failures" 
        if: steps.check_failures.outputs.has_failures == 'true'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: 'failure'
          SLACK_MESSAGE: "Security vulnerabilities found in ${{ steps.check_failures.outputs.failed_count }} out of ${{ steps.check_failures.outputs.total_count }} tags for ${{ matrix.image }}. View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          SLACK_TITLE: "❌ Trivy scan found vulnerabilities in ${{ matrix.image }}"
          SLACK_USERNAME: liquibot
          SLACK_WEBHOOK: ${{ secrets.DOCKER_SLACK_WEBHOOK_URL }}
          SLACK_ICON_EMOJI: ":warning:"
          SLACK_FOOTER: "${{ github.repository }} - ${{ matrix.image }}"
          SLACK_LINK_NAMES: true