name: Build QA Docker Images

permissions:
  contents: read
  id-token: write

on:
  workflow_dispatch:
    inputs:
      liquibaseVersion:
        description: "Liquibase Version (e.g., 4.33.0)"
        required: true
        type: string
      buildLiquibaseQA:
        description: "Build liquibase-qa (Dockerfile)"
        type: boolean
        default: true
      buildLiquibaseAlpineQA:
        description: "Build liquibase-qa-alpine (Dockerfile.alpine)"
        type: boolean
        default: true
      buildLiquibaseProQA:
        description: "Build liquibase-pro-qa (DockerfilePro)"
        type: boolean
        default: true

jobs:
  build-qa-docker:
    name: "Build and Push QA Docker Images"
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.set-matrix.outputs.matrix) }}
    steps:
      - name: Set matrix dynamically
        id: set-matrix
        run: |
          echo '{
            "include": [
              {"dockerfile": "Dockerfile", "image_name": "liquibase-qa", "suffix": ""} 
              ${{ inputs.buildLiquibaseQA && ',' }}
              {"dockerfile": "Dockerfile.alpine", "image_name": "liquibase-qa-alpine", "suffix": "-alpine"} 
              ${{ inputs.buildLiquibaseAlpineQA && ',' }}
              {"dockerfile": "DockerfilePro", "image_name": "liquibase-pro-qa", "suffix": "-pro"} 
            ]
          }' > matrix.json
          echo "::set-output name=matrix::$(cat matrix.json)"

      - name: Checkout code
        if: ${{ matrix.condition == true }}
        uses: actions/checkout@v4

      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets-liquibase
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Set up Docker Buildx
        if: ${{ matrix.condition == true }}
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        if: ${{ matrix.condition == true }}
        uses: docker/setup-qemu-action@v3

      - name: Log in to internal Nexus Docker Registry
        if: ${{ matrix.condition == true }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REPO_URL }}
          username: ${{ env.REPO_USER }}
          password: ${{ env.REPO_PASSWORD }}

      - name: Build and push Docker image
        if: ${{ matrix.condition == true }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          provenance: false
          tags: |
            ${{ env.REPO_URL }}/${{ matrix.image_name }}:${{ inputs.liquibaseVersion }}
          labels: |
            org.opencontainers.image.source=https://github.com/liquibase/docker
            org.opencontainers.image.description=Liquibase QA Container Image${{ matrix.suffix }}
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.vendor=Liquibase
            org.opencontainers.image.version=${{ inputs.liquibaseVersion }}
            org.opencontainers.image.documentation=https://docs.liquibase.com
      - name: Image build summary
        if: ${{ matrix.condition == true }}
        run: |
          echo "Successfully built and pushed: ${{ env.REPO_URL }}/${{ matrix.image_name }}:${{ inputs.liquibaseVersion }}"
